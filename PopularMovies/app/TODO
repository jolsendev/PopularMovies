- Get data from MovieDB api
    https://api.themoviedb.org/3/movie/297761?api_key=02a6d79992ed3e3da1f638dec4c74770
         http://api.themoviedb.org/3/discover/movie?primary_release_date.gte=2015-08-15&primary_release_date.lte=2016-08-22&api_key=02a6d79992ed3e3da1f638dec4c74770

    key = 02a6d79992ed3e3da1f638dec4c74770
     http://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=02a6d79992ed3e3da1f638dec4c74770
     http://api.themoviedb.org/3/discover/movie?primary_release_date.gte=2015-08-15&primary_release_date.lte=2016-08-22&api_key=02a6d79992ed3e3da1f638dec4c74770

-Fetch image using picasso
    base url will look like this: http://image.tmdb.org/t/p
    Then you will need a 'size' recommend using w185
    the poster path
    Final URL: http://image.tmdb.org/t/p/w185//nBNZadXqJSdt05SHLqgT0HuC5Gm.jpg
- Extract data
- Create main UI (grid)
- Create Detail View
- Populate main UI with list of popular movies
- Create a setting to change view order of main UI
- Populate detail view with
    original title
    movie poster image thumbnail
    a plot synopsis
    user rating
    release date



On main activity reference PopularMovieFragement




Phase II

Create ReviewCursorAdapter, TrailerCursorAdapter


/*
        Remember that these views are reused as needed.
     */
    @Override
    public View newView(Context context, Cursor cursor, ViewGroup parent) {
        View view = LayoutInflater.from(context).inflate(R.layout.list_item_forecast, parent, false);

        return view;
    }

    /*
        This is where we fill-in the views with the contents of the cursor.
     */
    @Override
    public void bindView(View view, Context context, Cursor cursor) {
        // our view is pretty simple here --- just a text view
        // we'll keep the UI functional with a simple (and slow!) binding.

        TextView tv = (TextView)view;
        tv.setText(convertCursorRowToUXFormat(cursor));
    }


Create different queries for favorite most_popular and top_rated