
moviedburi "http://api.themoviedb.org/3/discover/movie?primary_release_date.gte=2015-08-15&primary_release_date.lte=2016-08-22&api_key=02a6d79992ed3e3da1f638dec4c74770"

review http://api.themoviedb.org/3/movie/284052/reviews?&api_key=02a6d79992ed3e3da1f638dec4c74770

video http://api.themoviedb.org/3/movie/284052/videos?&api_key=02a6d79992ed3e3da1f638dec4c74770




Project Overview
Welcome back to Popular Movies! In this second and final stage, you’ll add additional functionality to the app you built in Stage 1.

You’ll add more information to your movie details view:

You’ll allow users to view and play trailers ( either in the youtube app or a web browser).
You’ll allow users to read reviews of a selected movie.
You’ll also allow users to mark a movie as a favorite in the details view by tapping a button(star). This is for a local movies collection that you will maintain and does not require an API request*.
You’ll modify the existing sorting criteria for the main view to include an additional pivot to show their favorites collection.


Implementation guide: https://docs.google.com/document/d/1ZlN1fUsCSKuInLECcJkslIqvpKlP7jWL2TP9m6UiA6I/pub?embedded=true#h.7sxo8jefdfll
google groups webcast content provider: https://plus.google.com/u/0/events/clqsqgjs7n93hga5b9t1ddc78eg?authkey=COX1v_yspsWojwE

///////////////////
Specifications
//////////////////
UI contains an element (e.g., a spinner or settings menu) to toggle the sort order of the movies by: most popular, highest rated.

Movies are displayed in the main layout via a grid of their corresponding movie poster thumbnails.

UI contains a screen for displaying the details for a selected movie.

Movie Details layout contains title, release date, movie poster, vote average, and plot synopsis.

Movie Details layout contains a section for displaying trailer videos and user reviews.

///////////////////////////
User Interface - Function
///////////////////////////
MEETS SPECIFICATIONS
When a user changes the sort criteria (most popular, highest rated, and favorites) the main view gets updated correctly.

When a movie poster thumbnail is selected, the movie details screen is launched.

When a trailer is selected, app uses an Intent to launch the trailer.

In the movies detail screen, a user can tap a button(for example, a star) to mark it as a Favorite.

////////////////////////////
Network API Implementation
////////////////////////////

MEETS SPECIFICATIONS
In a background thread, app queries the /movie/popular or /movie/top_rated API for the sort criteria specified in the settings menu.

App requests for related videos for a selected movie via the /movie/{id}/videos endpoint in a background thread and displays those details when the user selects a movie.

App requests for user reviews for a selected movie via the /movie/{id}/reviews endpoint in a background thread and displays those details when the user selects a movie.

//////////////////////////
Data Persistence
//////////////////////////
MEETS SPECIFICATIONS
App saves a "Favorited" movie to SharedPreferences or a database using the movie’s id.

When the "favorites" setting option is selected, the main view displays the entire favorites collection based on movie IDs stored in SharedPreferences or a database.

////////////////////////////
General Project Guidelines
//////////////////////////
MEETS SPECIFICATIONS
App conforms to common standards found in the Android Nanodegree General Project Guidelines.

Suggestions to Make Your Project Stand Out!
Implement a content provider to store favorite movie details with a database such as SQLite. Store the title, poster, synopsis, user rating, and release date and display them even when offline.
Implement sharing functionality to allow the user to share the first trailer’s YouTube URL from the movie details screen.

//this code was found here: http://stackoverflow.com/questions/574195/android-youtube-app-play-video-intent
public static void watchYoutubeVideo(String id){
    Intent appIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("vnd.youtube:" + id));
    Intent webIntent = new Intent(Intent.ACTION_VIEW,
                Uri.parse("http://www.youtube.com/watch?v=" + id));
    try {
        startActivity(appIntent);
    } catch (ActivityNotFoundException ex) {
        startActivity(webIntent);
    }
}

        public static final String MOVIE_ID = "movie_id";
        public static final String REVIEW_AUTHOR = "review_author";
        public static final String REVIEW_CONTENT = "review_content";
        public static final String REVIEW_URL = "review_url";



When I go into landscape from detail I need to see 2 pane UI
When i go back to the main activity from detail I want the grid view state to be the same
Efficient Android Threading


Things to debug

- launch activity
- click on review
- click up button
- Should return to proper detail view

- launch activity
- click on review
- rotate DUT
- click up button
- Should return to proper master/detail view



sync needs
MovieAuthenticator - extends AbstractAccountAuthenticator
MovieAuthenticatorService
MovieSyncService
MovieSyncAdapter - extends AbstractThreadedSyncAdapter


